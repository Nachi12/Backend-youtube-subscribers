{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-19T15:52:26.209Z",
    "end": "2025-10-19T15:52:26.258Z",
    "duration": 49,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8064890f-1843-498d-bb67-7f52b0cdbe46",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "214d7f7e-9cf5-425b-9e01-954829e0f264",
          "title": "🎬 YouTube Subscribers API Tests",
          "fullFile": "/Users/apple/MyWorkSapce/Alma/AlmaProjects/Yotube_Subscribers/src/__tests__/subscribers.test.js",
          "file": "/src/__tests__/subscribers.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"🎬 YouTube Subscribers API Tests\"",
              "fullTitle": "🎬 YouTube Subscribers API Tests \"before all\" hook in \"🎬 YouTube Subscribers API Tests\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MONGO_URI = process.env.MONGO_URI || \"mongodb://127.0.0.1:27017/youtubeSubscribersTest\";\nawait mongoose.connect(MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n// Clear previous data\nawait Subscriber.deleteMany({});\n// Insert one test document\ntestSubscriber = await Subscriber.create({\n  name: \"Test User\",\n  subscribedChannel: \"TechChannel\",\n  subscribedDate: new Date(),\n});",
              "err": {},
              "uuid": "481e8394-8090-4f7a-a5f6-df2940c7bc2a",
              "parentUUID": "214d7f7e-9cf5-425b-9e01-954829e0f264",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"🎬 YouTube Subscribers API Tests\"",
              "fullTitle": "🎬 YouTube Subscribers API Tests \"after all\" hook in \"🎬 YouTube Subscribers API Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.close();",
              "err": {},
              "uuid": "d4453156-0121-4f03-8929-4c7c73091e6a",
              "parentUUID": "214d7f7e-9cf5-425b-9e01-954829e0f264",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "✅ should GET all subscribers",
              "fullTitle": "🎬 YouTube Subscribers API Tests ✅ should GET all subscribers",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get(\"/subscribers\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a(\"array\");\n    res.body.length.should.be.greaterThan(0);\n    done();\n  });",
              "err": {},
              "uuid": "34e53c9f-4bb8-453e-80c3-e0f88e1a56cd",
              "parentUUID": "214d7f7e-9cf5-425b-9e01-954829e0f264",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "✅ should GET subscribers with only name and subscribedChannel",
              "fullTitle": "🎬 YouTube Subscribers API Tests ✅ should GET subscribers with only name and subscribedChannel",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get(\"/subscribers/names\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a(\"array\");\n    res.body[0].should.have.property(\"name\");\n    res.body[0].should.have.property(\"subscribedChannel\");\n    res.body[0].should.not.have.property(\"_id\");\n    done();\n  });",
              "err": {},
              "uuid": "cbeb6246-97e5-4be1-91b7-2489dcd0aba6",
              "parentUUID": "214d7f7e-9cf5-425b-9e01-954829e0f264",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "✅ should GET subscriber by valid ID",
              "fullTitle": "🎬 YouTube Subscribers API Tests ✅ should GET subscriber by valid ID",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get(`/subscribers/${testSubscriber._id}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a(\"object\");\n    res.body.should.have.property(\"name\").eq(\"Test User\");\n    done();\n  });",
              "err": {},
              "uuid": "ca92d3f4-34dc-43be-8cac-4b256a6b5859",
              "parentUUID": "214d7f7e-9cf5-425b-9e01-954829e0f264",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 400 for invalid subscriber ID",
              "fullTitle": "🎬 YouTube Subscribers API Tests ❌ should return 400 for invalid subscriber ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get(\"/subscribers/invalidid123\")\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.have.property(\"message\");\n    done();\n  });",
              "err": {},
              "uuid": "55c23523-8c91-4945-8ec0-616e7cb9f953",
              "parentUUID": "214d7f7e-9cf5-425b-9e01-954829e0f264",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34e53c9f-4bb8-453e-80c3-e0f88e1a56cd",
            "cbeb6246-97e5-4be1-91b7-2489dcd0aba6",
            "ca92d3f4-34dc-43be-8cac-4b256a6b5859",
            "55c23523-8c91-4945-8ec0-616e7cb9f953"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}